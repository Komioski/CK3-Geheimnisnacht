# Liege (actor) dismisses a Castellan.
liege_dismiss_castellan_interaction = {
	category = interaction_category_diarch
	common_interaction = yes
	icon = icon_dismiss_temporary_regency

	desc = liege_dismiss_castellan_interaction_desc

	is_shown = {
		# The obvious.
		NOT = { scope:actor = scope:recipient }
		# Diarchy checks for scope:actor.
		scope:actor = {
			# If you're not in a diarchy, we don't care.
			diarch ?= scope:recipient
			# With the extra consideration that we only want this to appear for Castellanies.
			has_diarchy_parameter = primeminister_dismissal_will_upset_administration
		}
	}

	is_valid_showing_failures_only = {
		# Basic requirements must be fulfilled.
		scope:actor = { can_leave_diarchy_trigger = yes }
	}

	cooldown = { years = 5 }
	
	on_accept = {
		scope:actor = {
			# We've dismissed your castellan!
			## Do we need to give a warning tooltip first?
			if = {
				limit = { has_diarchy_active_parameter = primeminister_dismissal_will_upset_administration }
				custom_tooltip = liege_dismiss_vizier_interaction.tt.problematic_dismissal.vizier_too_entrenched
			}
			## Now apply the real effects.
			send_interface_toast = {
				title = liege_dismiss_vizier_interaction.toast.t
				left_icon = scope:actor
				# Will this have ripple effects (actual)?
				if = {
					limit = { has_diarchy_active_parameter = primeminister_dismissal_will_upset_administration }
					# Apply the modifier, scaling to how much we dun goofed.
					add_character_modifier = {
						modifier = civil_service_in_chaos_modifier
						years = 10
					}
				}
				# End the diarchy.
				end_diarchy = yes
			}
		}
		# How badly do they take it?
		scope:recipient = {
			# Vengeful takes it badly.
			if = {
				limit = {
					has_trait = vengeful
					can_set_relation_rival_trigger = { CHARACTER = scope:actor }
				}
				set_relation_rival = {
					target = scope:actor
					reason = rival_dismissed_me_from_vizierate
				}
				add_opinion = {
					target = scope:actor
					modifier = insult_opinion
					opinion = -50
				}
			}
			# Even if they have something stopping them from becoming a rival (e.g., they're already your vizier).
			else_if = {
				limit = { has_trait = vengeful }
				add_opinion = {
					target = scope:actor
					modifier = insult_opinion
					opinion = -50
				}
			}
			# Forgiving isn't mad, they're just disappointed.
			else_if = {
				limit = { has_trait = forgiving }
				add_opinion = {
					target = scope:actor
					modifier = insult_opinion
					opinion = -10
				}
			}
			# Otherwise, a bit of pain is to be expected.
			else = {
				progress_towards_rival_effect = {
					REASON = rival_dismissed_me_from_vizierate
					CHARACTER = scope:actor
					OPINION = 0
				}
				# Throw the opinion manually so we can keep the type unified.
				add_opinion = {
					target = scope:actor
					modifier = insult_opinion
					opinion = -25
				}
			}
			# Plus some stress.
			stress_impact = {
				lazy = major_stress_impact_loss
				humble = medium_stress_impact_loss
				content = medium_stress_impact_loss
				diligent = medium_stress_impact_gain
				ambitious = major_stress_impact_gain
				arrogant = major_stress_impact_gain
			}
			# Extravagance modifiers taken care of in the on_action.
		}
		# Plus, remember to advertise to the player that there are alternatives.
		## We're deliberately doing this outside of scope:actor so we can make it a lil subtitle rather than something lumped in with the effect block.
		## Just give 'em a duchy.
		if = {
			limit = {
				scope:actor = { has_diarchy_active_parameter = primeminister_requires_duchy }
			}
			custom_tooltip = liege_dismiss_vizier_interaction.tt.problematic_dismissal.bribe.duchy
		}
		## Just give 'em a county.
		else_if = {
			limit = {
				scope:actor = { has_diarchy_active_parameter = primeminister_requires_county }
			}
			custom_tooltip = liege_dismiss_vizier_interaction.tt.problematic_dismissal.bribe.county
		}

		# Object explorer logging.
		scope:actor = {
			diarch_interaction_set_or_update_global_variable_effect = { VARIABLE = di_track_dismviz_accept }
			diarch_interaction_add_to_global_list_effect = { VARIABLE_LIST = di_track_dismviz_accept_actor_list }
		}
		scope:recipient = {
			diarch_interaction_add_to_global_list_effect = { VARIABLE_LIST = di_track_dismviz_accept_recipient_list }
		}
	}
	
	auto_accept = yes

	# AI
	ai_targets = { ai_recipients = diarch }
	ai_frequency = 24
	ai_potential = { has_active_diarchy = yes }

	ai_will_do = {
		# You should actively want to get rid of them.
		base = -25

		# If you appointed this vizier, don't remove them unless you get booted down to county or something.
		modifier = {
			add = -500
			var:my_vizier ?= scope:recipient
		}

		# Realm.
		## Weight up heavily for counts; they shouldn't generally get them, but they don't want to keep them if they do.
		modifier = {
			add = 1000
			highest_held_title_tier = tier_county
		}
		## Weight up for dukes.
		modifier = {
			add = 25
			highest_held_title_tier = tier_duchy
		}
		## Weight down for kings.
		modifier = {
			add = -25
			highest_held_title_tier = tier_kingdom
		}
		## Weight down for emperors.
		modifier = {
			add = -50
			highest_held_title_tier >= tier_empire
		}
		## Realm Size.
		### Smaller you are, the more likely you are to do this.
		### Tiny or less.
		modifier = {
			add = 50
			realm_size <= tiny_realm_size
		}
		### Minor.
		modifier = {
			add = 25
			realm_size > tiny_realm_size
			realm_size <= minor_realm_size
		}
		### Major.
		modifier = {
			add = -25
			realm_size >= major_realm_size
			realm_size < massive_realm_size
		}
		### Massive or more.
		modifier = {
			add = -50
			realm_size >= massive_realm_size
		}

		# Traits.
		## +++ Ambitious.
		modifier = {
			add = 25
			has_trait = ambitious
		}
		## +++ Arrogant.
		modifier = {
			add = 25
			has_trait = arrogant
		}
		## ++ Diligent.
		modifier = {
			add = 15
			has_trait = diligent
		}
		## ++ Patient.
		modifier = {
			add = 15
			has_trait = patient
		}
		## + Gregarious.
		modifier = {
			add = 5
			has_trait = gregarious
		}
		## - Shy.
		modifier = {
			add = -5
			has_trait = shy
		}
		## - Content.
		modifier = {
			add = -5
			has_trait = content
		}
		## -- Impatient.
		modifier = {
			add = -15
			has_trait = impatient
		}
		## -- Content.
		modifier = {
			add = -15
			has_trait = content
		}
		## -- Humble.
		modifier = {
			add = -15
			has_trait = humble
		}
		## --- Greedy.
		modifier = {
			add = -25
			has_trait = greedy
		}
		## --- Lazy.
		modifier = {
			add = -25
			has_trait = lazy
		}
	}
}

# Liege (actor) selects a Castellan to help them run the realm.
appoint_castellan_interaction = {
	category = interaction_category_diarch
	icon = icon_declare_me_regent

	desc = appoint_castellan_interaction_desc
	interface_priority = 20

	is_shown = {
		scope:actor = {
			# Must be able to retain a castellan.
			government_has_flag = may_appoint_castellans
			# Plus obscure the interaction if we've already got one, else it's annoyingly redundant.
			NOT = { has_diarchy_active_parameter = diarchy_is_vizierate }
		}
		# We perform this upon ourselves or our (probable) candidates.
		scope:recipient = {
			OR = {
				this = scope:actor
				is_courtier_of = scope:actor
				AND = {
					highest_held_title_tier = tier_barony
					liege = scope:actor
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		# You can't already be in a diarchy of any kind, or have a designated diarch.
		scope:actor = {
			NOR = {
				has_active_diarchy = yes
				exists = designated_diarch
			}
		}
		# Must be of a decent tier.
		custom_tooltip = {
			text = appoint_vizier_interaction.tt.duchy_or_more
			scope:actor.highest_held_title_tier >= tier_duchy
		}
		# Plus the usuals.
		scope:actor = { is_available_at_peace = yes }
		# And can't have put the realm into turmoil over this recently.
		scope:actor = {
			NOT = { has_character_modifier = civil_service_in_chaos_modifier }
		}
	}

	cooldown = { years = 5 }

	populate_recipient_list = { sort_vizier_candidates_to_list_effect = yes }

	cost = {
		prestige = major_prestige_value
		renown = {
			if = {
				limit = {
					exists = scope:secondary_recipient
					exists = scope:actor.house
					scope:secondary_recipient.house ?= scope:actor.house
				}
				add = massive_dynasty_prestige_value
			}
		}
	}

	auto_accept = yes

	pre_auto_accept = {
		# If we're an AI, set the secondary_recipient up for us.
		scope:actor = {
			if = {
				limit = { is_ai = yes }
				# First, we need to calc who _is_ most qualified; we don't have access to the character list any more, so reassemble it.
				sort_vizier_candidates_to_list_effect = yes
				# Now, parse through the the list to find the best character.
				ordered_in_list = {
					list = characters
					order_by = diarchy_vizier_succession_score_value
					save_scope_as = ai_recipient
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			# We enter into a vizierate with scope:secondary_recipient.
			custom_tooltip = {
				text = appoint_vizier_interaction.tt.enter_vizierate_with_secondary_recipient
				start_diarchy = vizierate
				# The player uses scope:secondary_recipient.
				if = {
					limit = {
						# We use a NOT here  rather than is_ai = no because the AI was occasionally managing to bork its selection process, and the title does _not_ like setting an empty diarch, so we fallback AI who can't behave to a sub-optimal choice.
						NOT = { exists = scope:ai_recipient }
					}
					set_diarch = scope:secondary_recipient
				}
				# Whereas the AI grabs their pre-selected candidate.
				else = {
					set_diarch = scope:ai_recipient
				}
			}
			# Apply opinion.
			## AI.
			if = {
				limit = { exists = scope:ai_recipient }
				scope:ai_recipient = {
					add_opinion = {
						target = scope:actor
						modifier = compliment_opinion
						opinion = 30
					}
					stress_impact = {
						ambitious = minor_stress_impact_loss
						arrogant = minor_stress_impact_loss
						lazy = major_stress_impact_gain
					}
				}
			}
			## Player.
			else = {
				scope:secondary_recipient = {
					add_opinion = {
						target = scope:actor
						modifier = compliment_opinion
						opinion = 30
					}
					stress_impact = {
						ambitious = minor_stress_impact_loss
						arrogant = minor_stress_impact_loss
						lazy = major_stress_impact_gain
					}
				}
			}
			# And get X tax jurisdictions.
			custom_tooltip = appoint_vizier_interaction.tt.secondary_recipient_grants_tax_jurisdictions
			# If scope:secondary_recipient isn't the most qualified candidate, we'll take a scaling negative stewardship modifier.
			## The AI will always pick the highest scoring character, so we only do this for players - lock it off so we're not doing lots of unnecessary calculating.
			if = {
				limit = { is_ai = no }
				# First, we need to calc who _is_ most qualified; we don't have access to the character list any more, so reassemble it.
				sort_vizier_candidates_to_list_effect = yes
				# Now, parse through the the list to find the best character.
				ordered_in_list = {
					list = characters
					order_by = diarchy_vizier_succession_score_value
					save_scope_as = best_candidate
				}
				# Is our chap _the_ chap?
				if = {
					limit = {
						NOT = { scope:secondary_recipient = scope:best_candidate }
					}
					# Ok, now display some warnings.
					custom_tooltip = appoint_vizier_interaction.tt.secondary_recipient_is_not_best_candidate
					add_character_modifier = {
						modifier = civil_service_upset_modifier
						years = 10
					}
				}
			}
			# Are they of our house?
			if = {
				limit = {
					exists = scope:secondary_recipient.house
					house ?= scope:secondary_recipient.house
				}
				custom_tooltip = appoint_vizier_interaction.tt.same_house_penalty
			}
			# If we have a designated diarch (and it's not this guy), then they're annoyed.
			designated_diarch ?= {
				if = {
					limit = {
						NOT = { this = scope:secondary_recipient }
					}
					add_opinion = {
						target = scope:actor
						modifier = appointed_vizier_over_designated_regent_opinion
						opinion = -40
					}
				}
			}
			# Set a reminder that we appointed this vizier — the AI'll use this to help with determining whether they should remove them or not.
			set_variable = {
				name = my_vizier
				value = scope:recipient
			}
			# Finally, let's do some stress.
			stress_impact = {
				trusting = massive_stress_impact_loss
				lazy = major_stress_impact_loss
				paranoid = minor_stress_impact_gain
				diligent = minor_stress_impact_gain
			}
		}
		# Notify about council problemos.
		scope:secondary_recipient = {
			if = {
				limit = { is_councillor = yes }
				custom_tooltip = appoint_vizier_interaction.tt.warning.vizier_replace_councillor
			}
		}
		
		# Object explorer logging.
		scope:actor = {
			diarch_interaction_set_or_update_global_variable_effect = { VARIABLE = di_track_appviz_accept }
			diarch_interaction_add_to_global_list_effect = { VARIABLE_LIST = di_track_appviz_accept_actor_list }
		}
		scope:recipient = {
			diarch_interaction_add_to_global_list_effect = { VARIABLE_LIST = di_track_appviz_accept_recipient_list }
		}
	}

	# AI
	ai_targets = { ai_recipients = self }
	ai_frequency = 240
	
	ai_potential = {
		government_has_flag = may_appoint_castellans
	}
	
	ai_will_do = {
		base = 0

		# Realm.
		## Weight up for kings.
		modifier = {
			add = 50
			highest_held_title_tier = tier_kingdom
		}
		## Weight up for emperors.
		modifier = {
			add = 75
			highest_held_title_tier >= tier_empire
		}
		## Add realm size directly.
		modifier = {
			add = sub_realm_size
			is_landed = yes
		}

		# Traits.
		## +++ Lazy.
		modifier = {
			add = 25
			has_trait = lazy
		}
		## +++ Greedy.
		modifier = {
			add = 25
			has_trait = greedy
		}
		## ++ Humble.
		modifier = {
			add = 15
			has_trait = humble
		}
		## ++ Content.
		modifier = {
			add = 15
			has_trait = content
		}
		## ++ Impatient.
		modifier = {
			add = 15
			has_trait = impatient
		}
		## + Content.
		modifier = {
			add = 5
			has_trait = content
		}
		## + Shy.
		modifier = {
			add = 5
			has_trait = shy
		}
		## - Gregarious.
		modifier = {
			add = -5
			has_trait = gregarious
		}
		## -- Patient.
		modifier = {
			add = -15
			has_trait = patient
		}
		## -- Diligent.
		modifier = {
			add = -15
			has_trait = diligent
		}
		## --- Arrogant.
		modifier = {
			add = -25
			has_trait = arrogant
		}
		## --- Ambitious.
		modifier = {
			add = -25
			has_trait = ambitious
		}
	}
}